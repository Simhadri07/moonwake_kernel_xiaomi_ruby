name: Build MoonWake Ruby Kernel (with KSU)

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master

permissions:
  contents: write   # required for creating releases

jobs:
  build-and-release:
    runs-on: ubuntu-22.04
    env:
      WORKDIR: ${{ github.workspace }}
      OUTDIR: out
      ZIP_PREFIX: moonwake_ruby_ksu

    steps:
      - name: Checkout kernel source (with submodules)
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup environment (apt)
        run: |
          sudo apt-get update
          sudo apt-get install -y git bc bison flex build-essential \
            libssl-dev libncurses-dev ccache zip unzip curl wget clang

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-${{ hashFiles('**/Makefile') }}
          restore-keys: |
            ccache-${{ runner.os }}-

      - name: Download Google clang r530567 (optional)
        run: |
          mkdir -p "${WORKDIR}/clang"
          cd "${WORKDIR}/clang"
          wget -q https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/r530567/clang-r530567.tar.gz -O clang.tar.gz || true
          if [ -f clang.tar.gz ]; then
            tar -xzf clang.tar.gz --strip-components=1
            echo "Using prebuilt clang in ${WORKDIR}/clang"
          else
            echo "⚠️ prebuilt clang not found — using system clang"
          fi

      - name: Configure kernel (ruby_defconfig + merge KernelSU config if present)
        run: |
          set -e
          export ARCH=arm64
          export SUBARCH=arm64
          export PATH="${WORKDIR}/clang/bin:$PATH"
          export CC=clang
          export LLVM=1
          export DEFCONFIG=ruby_defconfig
          mkdir -p "${WORKDIR}/${OUTDIR}"
          make O="${WORKDIR}/${OUTDIR}" ${DEFCONFIG}
          # merge kernelsu config if present
          if [ -f arch/arm64/configs/features/kernelsu.config ]; then
            echo "Merging kernelsu.config into generated config..."
            if [ -f ./scripts/kconfig/merge_config.sh ]; then
              ./scripts/kconfig/merge_config.sh "${WORKDIR}/${OUTDIR}/.config" arch/arm64/configs/features/kernelsu.config
              make O="${WORKDIR}/${OUTDIR}" olddefconfig
            else
              # fallback append-and-olddefconfig
              cat arch/arm64/configs/features/kernelsu.config >> "${WORKDIR}/${OUTDIR}/.config"
              make O="${WORKDIR}/${OUTDIR}" olddefconfig
            fi
          else
            echo "⚠️ kernelsu.config not found. Ensure KernelSU is integrated into your tree."
          fi

      - name: Build kernel
        run: |
          set -e
          export ARCH=arm64
          export SUBARCH=arm64
          export PATH="${WORKDIR}/clang/bin:$PATH"
          export CC=clang
          export LLVM=1
          make -j$(nproc) O="${WORKDIR}/${OUTDIR}"

      - name: Collect kernel image
        id: collect-image
        run: |
          set -e
          IMG=""
          candidates=(
            "${WORKDIR}/${OUTDIR}/arch/arm64/boot/Image.gz-dtb"
            "${WORKDIR}/${OUTDIR}/arch/arm64/boot/Image.gz"
            "${WORKDIR}/${OUTDIR}/arch/arm64/boot/Image"
            "${WORKDIR}/${OUTDIR}/arch/arm64/boot/Image.lz"
            "${WORKDIR}/${OUTDIR}/arch/arm64/boot/Image.lz-dtb"
          )
          for f in "${candidates[@]}"; do
            if [ -f "$f" ]; then
              IMG="$f"
              break
            fi
          done
          if [ -z "$IMG" ]; then
            echo "Kernel image not found! Searched: ${candidates[*]}"
            exit 1
          fi
          echo "Found kernel image: $IMG"
          echo "IMAGE=$IMG" >> $GITHUB_ENV
          echo "image_path=$IMG" >> $GITHUB_OUTPUT

      - name: Clone AnyKernel3
        run: |
          set -e
          cd "${WORKDIR}"
          rm -rf AnyKernel3
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git
          chmod -R a+rX AnyKernel3

      - name: Copy kernel image into AnyKernel3
        run: |
          set -e
          cd "${WORKDIR}/AnyKernel3"
          # copy using the found IMAGE env var
          if cp "${IMAGE}" ./Image.gz-dtb 2>/dev/null; then
            echo "Copied kernel as Image.gz-dtb"
          elif cp "${IMAGE}" ./Image 2>/dev/null; then
            echo "Copied kernel as Image"
          else
            echo "Could not copy kernel image to AnyKernel3 directory"
            ls -l "${IMAGE}" || true
            exit 1
          fi
          # adjust anykernel.sh for slot devices if present
          if grep -q "is_slot_device=0" anykernel.sh; then
            sed -i 's/is_slot_device=0/is_slot_device=1/' anykernel.sh || true
          fi

      - name: Pack AnyKernel3 zip
        id: pack-zip
        run: |
          set -e
          cd "${WORKDIR}/AnyKernel3"
          ZIPNAME="${ZIP_PREFIX}_${{ github.run_id }}.zip"
          zip -r "${WORKDIR}/${ZIPNAME}" . -x ".git*" -x "README.md"
          echo "ZIPNAME=${ZIPNAME}" >> $GITHUB_ENV
          echo "zip_path=${WORKDIR}/${ZIPNAME}" >> $GITHUB_OUTPUT
          ls -lh "${WORKDIR}/${ZIPNAME}"

      - name: Upload artifact (zip)
        uses: actions/upload-artifact@v3
        with:
          name: ruby-kernel-ksu
          path: ${{ env.ZIPNAME }}

      - name: Create GitHub release (attach ZIP)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: moonwake-${{ github.run_id }}
          name: MoonWake Ruby Kernel KSU - run ${{ github.run_id }}
          files: ${{ env.ZIPNAME }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
